#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
var app = require('../app');
var cron = require('node-cron');
var debug = require('debug')('serverstats:server');
var http = require('http');

const { Server } = require("socket.io");
const { fetchGuildData } = require('../helpers/guild');
const endpoint = require('../helpers/urls').guild;

const TOKEN = process.env.TOKEN;
const GUILD_ID = process.env.GUILD_ID;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server and socket server.
 */

var server = http.createServer(app);
const io = new Server(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Listen for new socket connections and log them.
 */

 io.on('connection', (socket) => {  console.log('a user connected');});

/**
 * Start cron job to fetch guild data every minute
 */

cron.schedule('* * * * *', async () => {
  const data = await fetchGuildData(endpoint, GUILD_ID, TOKEN);
  const memberCount = data['approximate_member_count'];
  io.emit('refresh data', memberCount);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
